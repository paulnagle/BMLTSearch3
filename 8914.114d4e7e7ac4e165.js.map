{"version":3,"file":"8914.114d4e7e7ac4e165.js","mappings":"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","names":["fastDeepEqual","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","DEFAULT_ID","LoaderStatus","INITIALIZED","LOADING","SUCCESS","FAILURE","Loader","apiKey","channel","client","id","libraries","language","region","version","mapIds","nonce","retries","url","this","CALLBACK","callbacks","done","loading","errors","instance","options","Error","JSON","stringify","status","failed","createUrl","join","deleteScript","script","document","getElementById","remove","load","loadPromise","Promise","resolve","reject","loadCallback","err","error","window","google","fn","push","execute","setScript","callback","createElement","type","src","onerror","loadErrorCallback","bind","defer","async","head","appendChild","reset","onerrorEvent","resetIfRetryingFailed","e","delay","Math","pow","console","log","setTimeout","setCallback","__googleMapsCallback","forEach","cb","maps","warn"],"sourceRoot":"webpack:///","sources":["./node_modules/@googlemaps/js-api-loader/dist/index.esm.js"],"sourcesContent":["// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */\nvar LoaderStatus;\n(function (LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nclass Loader {\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */\n    constructor({ apiKey, channel, client, id = DEFAULT_ID, libraries = [], language, region, version, mapIds, nonce, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", }) {\n        this.CALLBACK = \"__googleMapsCallback\";\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.version = version;\n        this.apiKey = apiKey;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.libraries = libraries;\n        this.language = language;\n        this.region = region;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.retries = retries;\n        this.url = url;\n        if (Loader.instance) {\n            if (!fastDeepEqual(this.options, Loader.instance.options)) {\n                throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     */\n    createUrl() {\n        let url = this.url;\n        url += `?callback=${this.CALLBACK}`;\n        if (this.apiKey) {\n            url += `&key=${this.apiKey}`;\n        }\n        if (this.channel) {\n            url += `&channel=${this.channel}`;\n        }\n        if (this.client) {\n            url += `&client=${this.client}`;\n        }\n        if (this.libraries.length > 0) {\n            url += `&libraries=${this.libraries.join(\",\")}`;\n        }\n        if (this.language) {\n            url += `&language=${this.language}`;\n        }\n        if (this.region) {\n            url += `&region=${this.region}`;\n        }\n        if (this.version) {\n            url += `&v=${this.version}`;\n        }\n        if (this.mapIds) {\n            url += `&map_ids=${this.mapIds.join(\",\")}`;\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     */\n    load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     */\n    loadPromise() {\n        return new Promise((resolve, reject) => {\n            this.loadCallback((err) => {\n                if (!err) {\n                    resolve(window.google);\n                }\n                else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     */\n    loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */\n    setScript() {\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const url = this.createUrl();\n        const script = document.createElement(\"script\");\n        script.id = this.id;\n        script.type = \"text/javascript\";\n        script.src = url;\n        script.onerror = this.loadErrorCallback.bind(this);\n        script.defer = true;\n        script.async = true;\n        if (this.nonce) {\n            script.nonce = this.nonce;\n        }\n        document.head.appendChild(script);\n    }\n    /**\n     * Reset the loader state.\n     */\n    reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.log(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n            setTimeout(() => {\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        }\n        else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    setCallback() {\n        window.__googleMapsCallback = this.callback.bind(this);\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb) => {\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.done) {\n            this.callback();\n        }\n        else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n                    \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            if (this.loading) ;\n            else {\n                this.loading = true;\n                this.setCallback();\n                this.setScript();\n            }\n        }\n    }\n}\n\nexport { DEFAULT_ID, Loader, LoaderStatus };\n"],"x_google_ignoreList":[0]}