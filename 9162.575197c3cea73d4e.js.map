{"version":3,"file":"9162.575197c3cea73d4e.js","mappings":"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","names":["MapCustomElement","HTMLElement","constructor","super","connectedCallback","this","innerHTML","Capacitor","getPlatform","style","overflow","overflowDiv","document","createElement","height","appendChild","customElements","define","GoogleMap","id","element","resizeObserver","handleScrollEvent","updateMapBounds","create","options","callback","_asyncToGenerator","newMap","Error","undefined","config","androidLiteMode","dataset","internalId","elementBounds","getElementBounds","width","x","y","devicePixelRatio","window","initScrolling","isNativePlatform","getMapBounds","_a","_b","mapRect","getBoundingClientRect","onDisplay","CapacitorGoogleMaps","mapBounds","onResize","ionicPage","closest","addEventListener","setTimeout","lastState","isHidden","ResizeObserver","observe","Promise","resolve","reject","err","onMapReadyListener","addListener","data","mapId","remove","retries","boundsInterval","setInterval","console","warn","clearInterval","enableTouch","_this","disableTouch","_this2","enableClustering","minClusterSize","_this3","disableClustering","_this4","addMarker","marker","_this5","addMarkers","markers","_this6","ids","removeMarker","_this7","markerId","removeMarkers","_this8","markerIds","addPolygons","polygons","_this9","addPolylines","polylines","_this10","removePolygons","_this11","polygonIds","addCircles","circles","_this12","removeCircles","_this13","circleIds","removePolylines","_this14","polylineIds","destroy","_this15","disableScrolling","disconnect","removeAllMapListeners","setCamera","_this16","getMapType","_this17","type","MapType","setMapType","mapType","_this18","enableIndoorMaps","enabled","_this19","enableTrafficLayer","_this20","enableAccessibilityElements","_this21","enableCurrentLocation","_this22","setPadding","padding","_this23","_this24","LatLngBounds","fitBounds","bounds","_this25","ionContents","getElementsByTagName","i","length","scrollEvents","screen","orientation","removeEventListener","onScroll","setOnCameraIdleListener","_this26","onCameraIdleListener","generateCallback","setOnBoundsChangedListener","_this27","onBoundsChangedListener","setOnCameraMoveStartedListener","_this28","onCameraMoveStartedListener","setOnClusterClickListener","_this29","onClusterClickListener","setOnClusterInfoWindowClickListener","_this30","onClusterInfoWindowClickListener","setOnInfoWindowClickListener","_this31","onInfoWindowClickListener","setOnMapClickListener","_this32","onMapClickListener","setOnPolygonClickListener","_this33","onPolygonClickListener","setOnCircleClickListener","_this34","onCircleClickListener","setOnMarkerClickListener","_this35","onMarkerClickListener","setOnPolylineClickListener","_this36","onPolylineClickListener","setOnMarkerDragStartListener","_this37","onMarkerDragStartListener","setOnMarkerDragListener","_this38","onMarkerDragListener","setOnMarkerDragEndListener","_this39","onMarkerDragEndListener","setOnMyLocationButtonClickListener","_this40","onMyLocationButtonClickListener","setOnMyLocationClickListener","_this41","onMyLocationClickListener","_this42","i0","item_r1","_r3","$implicit","ctx_r2","selectSearchResult","description","routes","path","component","_MapSearchPage","MapSearchPage","translate","storage","loaderCtrl","GeocodeService","meetingListService","modalCtrl","zone","performSearch","isLoaded","autocompleteItems","autocomplete","input","language","currentMarkerIDs","debounceTimestamp","ngOnDestroy","map","currentMarkerList","currentMeetings","ionViewDidEnter","GoogleAutocomplete","google","maps","places","AutocompleteService","get","then","langValue","value","addressLatitude","addressLongitude","createMap","log","locatePhone","subscribe","presentLoader","Geolocation","getCurrentPosition","resp","coords","latitude","longitude","set","dismissLoader","catch","error","mapRef","getElementById","mapLatitude","mapLongitude","mapArgs","apiKey","forceCreate","center","lat","lng","zoom","event","mapRadiusMeters","geometry","spherical","computeDistanceBetween","southwest","mapRadius","Math","ceil","Number","result","clusteringDisabled","getMeetings","openMeetingModal","title","Date","now","getRadiusMeetings","meetingList","filter","meeting","parseFloat","pushStandaloneMeetingMarker","meetingsAreCoLocated","id_bigint","markerLatLng","coordinate","iconUrl","iconAnchor","push","markerIDs","clusteringEnabled","j","areColocated","round","item","convertAddress","geocode_reponse","results","location","updateSearchResults","detail","getPlacePredictions","types","predictions","status","run","forEach","prediction","loaderText","loader","present","dismiss","meetingIDs","getMeetingsByIDs","response","start_time_raw","convertTo12Hr","start_time","openModal","modal","ModalPage","componentProps","onDidDismiss","dataReturned","timeString","H","substr","ampm","i1","i2","i3","i4","i5","i6","selectors","decls","vars","consts","template","rf","ctx","$event","MapSearchPage_ion_item_10_Template","MapSearchPageRoutingModule","_MapSearchPageRoutingModule","RouterModule","forChild","MapSearchPageModule","_MapSearchPageModule","MeetingListService","StorageService","imports","CommonModule","FormsModule","IonicModule","TranslateModule","northeast","contains","point","mapBoundsContains","extend","mapBoundsExtend","Normal","Hybrid","Satellite","Terrain","None","registerPlugin","web","__webpack_require__","e","bind","m","CapacitorGoogleMapsWeb","elem","elementFromPoint","mapInFocus","dispatchMapEvent","focus"],"sourceRoot":"webpack:///","sources":["./node_modules/@capacitor/google-maps/dist/esm/map.js","./src/app/pages/map-search/map-search.page.html","./src/app/pages/map-search/map-search-routing.module.ts","./src/app/pages/map-search/map-search.page.ts","./src/app/pages/map-search/map-search.module.ts","./node_modules/@capacitor/google-maps/dist/esm/definitions.js","./node_modules/@capacitor/google-maps/dist/esm/implementation.js"],"sourcesContent":["import { Capacitor } from '@capacitor/core';\nimport { LatLngBounds, MapType } from './definitions';\nimport { CapacitorGoogleMaps } from './implementation';\nclass MapCustomElement extends HTMLElement {\n    constructor() {\n        super();\n    }\n    connectedCallback() {\n        this.innerHTML = '';\n        if (Capacitor.getPlatform() == 'ios') {\n            this.style.overflow = 'scroll';\n            this.style['-webkit-overflow-scrolling'] = 'touch';\n            const overflowDiv = document.createElement('div');\n            overflowDiv.style.height = '200%';\n            this.appendChild(overflowDiv);\n        }\n    }\n}\ncustomElements.define('capacitor-google-map', MapCustomElement);\nexport class GoogleMap {\n    constructor(id) {\n        this.element = null;\n        this.resizeObserver = null;\n        this.handleScrollEvent = () => this.updateMapBounds();\n        this.id = id;\n    }\n    /**\n     * Creates a new instance of a Google Map\n     * @param options\n     * @param callback\n     * @returns GoogleMap\n     */\n    static async create(options, callback) {\n        const newMap = new GoogleMap(options.id);\n        if (!options.element) {\n            throw new Error('container element is required');\n        }\n        if (options.config.androidLiteMode === undefined) {\n            options.config.androidLiteMode = false;\n        }\n        newMap.element = options.element;\n        newMap.element.dataset.internalId = options.id;\n        const elementBounds = await GoogleMap.getElementBounds(options.element);\n        options.config.width = elementBounds.width;\n        options.config.height = elementBounds.height;\n        options.config.x = elementBounds.x;\n        options.config.y = elementBounds.y;\n        options.config.devicePixelRatio = window.devicePixelRatio;\n        if (Capacitor.getPlatform() == 'android') {\n            newMap.initScrolling();\n        }\n        if (Capacitor.isNativePlatform()) {\n            options.element = {};\n            const getMapBounds = () => {\n                var _a, _b;\n                const mapRect = (_b = (_a = newMap.element) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : {};\n                return {\n                    x: mapRect.x,\n                    y: mapRect.y,\n                    width: mapRect.width,\n                    height: mapRect.height,\n                };\n            };\n            const onDisplay = () => {\n                CapacitorGoogleMaps.onDisplay({\n                    id: newMap.id,\n                    mapBounds: getMapBounds(),\n                });\n            };\n            const onResize = () => {\n                CapacitorGoogleMaps.onResize({\n                    id: newMap.id,\n                    mapBounds: getMapBounds(),\n                });\n            };\n            const ionicPage = newMap.element.closest('.ion-page');\n            if (Capacitor.getPlatform() === 'ios' && ionicPage) {\n                ionicPage.addEventListener('ionViewWillEnter', () => {\n                    setTimeout(() => {\n                        onDisplay();\n                    }, 100);\n                });\n                ionicPage.addEventListener('ionViewDidEnter', () => {\n                    setTimeout(() => {\n                        onDisplay();\n                    }, 100);\n                });\n            }\n            const lastState = {\n                width: elementBounds.width,\n                height: elementBounds.height,\n                isHidden: false,\n            };\n            newMap.resizeObserver = new ResizeObserver(() => {\n                if (newMap.element != null) {\n                    const mapRect = newMap.element.getBoundingClientRect();\n                    const isHidden = mapRect.width === 0 && mapRect.height === 0;\n                    if (!isHidden) {\n                        if (lastState.isHidden) {\n                            if (Capacitor.getPlatform() === 'ios' && !ionicPage) {\n                                onDisplay();\n                            }\n                        }\n                        else if (lastState.width !== mapRect.width ||\n                            lastState.height !== mapRect.height) {\n                            onResize();\n                        }\n                    }\n                    lastState.width = mapRect.width;\n                    lastState.height = mapRect.height;\n                    lastState.isHidden = isHidden;\n                }\n            });\n            newMap.resizeObserver.observe(newMap.element);\n        }\n        // small delay to allow for iOS WKWebView to setup corresponding element sub-scroll views ???\n        await new Promise((resolve, reject) => {\n            setTimeout(async () => {\n                try {\n                    await CapacitorGoogleMaps.create(options);\n                    resolve(undefined);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }, 200);\n        });\n        if (callback) {\n            const onMapReadyListener = await CapacitorGoogleMaps.addListener('onMapReady', (data) => {\n                if (data.mapId == newMap.id) {\n                    callback(data);\n                    onMapReadyListener.remove();\n                }\n            });\n        }\n        return newMap;\n    }\n    static async getElementBounds(element) {\n        return new Promise(resolve => {\n            let elementBounds = element.getBoundingClientRect();\n            if (elementBounds.width == 0) {\n                let retries = 0;\n                const boundsInterval = setInterval(function () {\n                    if (elementBounds.width == 0 && retries < 30) {\n                        elementBounds = element.getBoundingClientRect();\n                        retries++;\n                    }\n                    else {\n                        if (retries == 30) {\n                            console.warn('Map size could not be determined');\n                        }\n                        clearInterval(boundsInterval);\n                        resolve(elementBounds);\n                    }\n                }, 100);\n            }\n            else {\n                resolve(elementBounds);\n            }\n        });\n    }\n    /**\n     * Enable touch events on native map\n     *\n     * @returns void\n     */\n    async enableTouch() {\n        return CapacitorGoogleMaps.enableTouch({\n            id: this.id,\n        });\n    }\n    /**\n     * Disable touch events on native map\n     *\n     * @returns void\n     */\n    async disableTouch() {\n        return CapacitorGoogleMaps.disableTouch({\n            id: this.id,\n        });\n    }\n    /**\n     * Enable marker clustering\n     *\n     * @param minClusterSize - The minimum number of markers that can be clustered together.\n     * @defaultValue 4\n     *\n     * @returns void\n     */\n    async enableClustering(minClusterSize) {\n        return CapacitorGoogleMaps.enableClustering({\n            id: this.id,\n            minClusterSize,\n        });\n    }\n    /**\n     * Disable marker clustering\n     *\n     * @returns void\n     */\n    async disableClustering() {\n        return CapacitorGoogleMaps.disableClustering({\n            id: this.id,\n        });\n    }\n    /**\n     * Adds a marker to the map\n     *\n     * @param marker\n     * @returns created marker id\n     */\n    async addMarker(marker) {\n        const res = await CapacitorGoogleMaps.addMarker({\n            id: this.id,\n            marker,\n        });\n        return res.id;\n    }\n    /**\n     * Adds multiple markers to the map\n     *\n     * @param markers\n     * @returns array of created marker IDs\n     */\n    async addMarkers(markers) {\n        const res = await CapacitorGoogleMaps.addMarkers({\n            id: this.id,\n            markers,\n        });\n        return res.ids;\n    }\n    /**\n     * Remove marker from the map\n     *\n     * @param id id of the marker to remove from the map\n     * @returns\n     */\n    async removeMarker(id) {\n        return CapacitorGoogleMaps.removeMarker({\n            id: this.id,\n            markerId: id,\n        });\n    }\n    /**\n     * Remove markers from the map\n     *\n     * @param ids array of ids to remove from the map\n     * @returns\n     */\n    async removeMarkers(ids) {\n        return CapacitorGoogleMaps.removeMarkers({\n            id: this.id,\n            markerIds: ids,\n        });\n    }\n    async addPolygons(polygons) {\n        const res = await CapacitorGoogleMaps.addPolygons({\n            id: this.id,\n            polygons,\n        });\n        return res.ids;\n    }\n    async addPolylines(polylines) {\n        const res = await CapacitorGoogleMaps.addPolylines({\n            id: this.id,\n            polylines,\n        });\n        return res.ids;\n    }\n    async removePolygons(ids) {\n        return CapacitorGoogleMaps.removePolygons({\n            id: this.id,\n            polygonIds: ids,\n        });\n    }\n    async addCircles(circles) {\n        const res = await CapacitorGoogleMaps.addCircles({\n            id: this.id,\n            circles,\n        });\n        return res.ids;\n    }\n    async removeCircles(ids) {\n        return CapacitorGoogleMaps.removeCircles({\n            id: this.id,\n            circleIds: ids,\n        });\n    }\n    async removePolylines(ids) {\n        return CapacitorGoogleMaps.removePolylines({\n            id: this.id,\n            polylineIds: ids,\n        });\n    }\n    /**\n     * Destroy the current instance of the map\n     */\n    async destroy() {\n        var _a;\n        if (Capacitor.getPlatform() == 'android') {\n            this.disableScrolling();\n        }\n        if (Capacitor.isNativePlatform()) {\n            (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        }\n        this.removeAllMapListeners();\n        return CapacitorGoogleMaps.destroy({\n            id: this.id,\n        });\n    }\n    /**\n     * Update the map camera configuration\n     *\n     * @param config\n     * @returns\n     */\n    async setCamera(config) {\n        return CapacitorGoogleMaps.setCamera({\n            id: this.id,\n            config,\n        });\n    }\n    async getMapType() {\n        const { type } = await CapacitorGoogleMaps.getMapType({ id: this.id });\n        return MapType[type];\n    }\n    /**\n     * Sets the type of map tiles that should be displayed.\n     *\n     * @param mapType\n     * @returns\n     */\n    async setMapType(mapType) {\n        return CapacitorGoogleMaps.setMapType({\n            id: this.id,\n            mapType,\n        });\n    }\n    /**\n     * Sets whether indoor maps are shown, where available.\n     *\n     * @param enabled\n     * @returns\n     */\n    async enableIndoorMaps(enabled) {\n        return CapacitorGoogleMaps.enableIndoorMaps({\n            id: this.id,\n            enabled,\n        });\n    }\n    /**\n     * Controls whether the map is drawing traffic data, if available.\n     *\n     * @param enabled\n     * @returns\n     */\n    async enableTrafficLayer(enabled) {\n        return CapacitorGoogleMaps.enableTrafficLayer({\n            id: this.id,\n            enabled,\n        });\n    }\n    /**\n     * Show accessibility elements for overlay objects, such as Marker and Polyline.\n     *\n     * Only available on iOS.\n     *\n     * @param enabled\n     * @returns\n     */\n    async enableAccessibilityElements(enabled) {\n        return CapacitorGoogleMaps.enableAccessibilityElements({\n            id: this.id,\n            enabled,\n        });\n    }\n    /**\n     * Set whether the My Location dot and accuracy circle is enabled.\n     *\n     * @param enabled\n     * @returns\n     */\n    async enableCurrentLocation(enabled) {\n        return CapacitorGoogleMaps.enableCurrentLocation({\n            id: this.id,\n            enabled,\n        });\n    }\n    /**\n     * Set padding on the 'visible' region of the view.\n     *\n     * @param padding\n     * @returns\n     */\n    async setPadding(padding) {\n        return CapacitorGoogleMaps.setPadding({\n            id: this.id,\n            padding,\n        });\n    }\n    /**\n     * Get the map's current viewport latitude and longitude bounds.\n     *\n     * @returns {LatLngBounds}\n     */\n    async getMapBounds() {\n        return new LatLngBounds(await CapacitorGoogleMaps.getMapBounds({\n            id: this.id,\n        }));\n    }\n    async fitBounds(bounds, padding) {\n        return CapacitorGoogleMaps.fitBounds({\n            id: this.id,\n            bounds,\n            padding,\n        });\n    }\n    initScrolling() {\n        const ionContents = document.getElementsByTagName('ion-content');\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < ionContents.length; i++) {\n            ionContents[i].scrollEvents = true;\n        }\n        window.addEventListener('ionScroll', this.handleScrollEvent);\n        window.addEventListener('scroll', this.handleScrollEvent);\n        window.addEventListener('resize', this.handleScrollEvent);\n        if (screen.orientation) {\n            screen.orientation.addEventListener('change', () => {\n                setTimeout(this.updateMapBounds, 500);\n            });\n        }\n        else {\n            window.addEventListener('orientationchange', () => {\n                setTimeout(this.updateMapBounds, 500);\n            });\n        }\n    }\n    disableScrolling() {\n        window.removeEventListener('ionScroll', this.handleScrollEvent);\n        window.removeEventListener('scroll', this.handleScrollEvent);\n        window.removeEventListener('resize', this.handleScrollEvent);\n        if (screen.orientation) {\n            screen.orientation.removeEventListener('change', () => {\n                setTimeout(this.updateMapBounds, 1000);\n            });\n        }\n        else {\n            window.removeEventListener('orientationchange', () => {\n                setTimeout(this.updateMapBounds, 1000);\n            });\n        }\n    }\n    updateMapBounds() {\n        if (this.element) {\n            const mapRect = this.element.getBoundingClientRect();\n            CapacitorGoogleMaps.onScroll({\n                id: this.id,\n                mapBounds: {\n                    x: mapRect.x,\n                    y: mapRect.y,\n                    width: mapRect.width,\n                    height: mapRect.height,\n                },\n            });\n        }\n    }\n    /*\n    private findContainerElement(): HTMLElement | null {\n      if (!this.element) {\n        return null;\n      }\n  \n      let parentElement = this.element.parentElement;\n      while (parentElement !== null) {\n        if (window.getComputedStyle(parentElement).overflowY !== 'hidden') {\n          return parentElement;\n        }\n  \n        parentElement = parentElement.parentElement;\n      }\n  \n      return null;\n    }\n    */\n    /**\n     * Set the event listener on the map for 'onCameraIdle' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnCameraIdleListener(callback) {\n        if (this.onCameraIdleListener) {\n            this.onCameraIdleListener.remove();\n        }\n        if (callback) {\n            this.onCameraIdleListener = await CapacitorGoogleMaps.addListener('onCameraIdle', this.generateCallback(callback));\n        }\n        else {\n            this.onCameraIdleListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onBoundsChanged' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnBoundsChangedListener(callback) {\n        if (this.onBoundsChangedListener) {\n            this.onBoundsChangedListener.remove();\n        }\n        if (callback) {\n            this.onBoundsChangedListener = await CapacitorGoogleMaps.addListener('onBoundsChanged', this.generateCallback(callback));\n        }\n        else {\n            this.onBoundsChangedListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onCameraMoveStarted' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnCameraMoveStartedListener(callback) {\n        if (this.onCameraMoveStartedListener) {\n            this.onCameraMoveStartedListener.remove();\n        }\n        if (callback) {\n            this.onCameraMoveStartedListener = await CapacitorGoogleMaps.addListener('onCameraMoveStarted', this.generateCallback(callback));\n        }\n        else {\n            this.onCameraMoveStartedListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onClusterClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnClusterClickListener(callback) {\n        if (this.onClusterClickListener) {\n            this.onClusterClickListener.remove();\n        }\n        if (callback) {\n            this.onClusterClickListener = await CapacitorGoogleMaps.addListener('onClusterClick', this.generateCallback(callback));\n        }\n        else {\n            this.onClusterClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onClusterInfoWindowClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnClusterInfoWindowClickListener(callback) {\n        if (this.onClusterInfoWindowClickListener) {\n            this.onClusterInfoWindowClickListener.remove();\n        }\n        if (callback) {\n            this.onClusterInfoWindowClickListener =\n                await CapacitorGoogleMaps.addListener('onClusterInfoWindowClick', this.generateCallback(callback));\n        }\n        else {\n            this.onClusterInfoWindowClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onInfoWindowClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnInfoWindowClickListener(callback) {\n        if (this.onInfoWindowClickListener) {\n            this.onInfoWindowClickListener.remove();\n        }\n        if (callback) {\n            this.onInfoWindowClickListener = await CapacitorGoogleMaps.addListener('onInfoWindowClick', this.generateCallback(callback));\n        }\n        else {\n            this.onInfoWindowClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMapClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMapClickListener(callback) {\n        if (this.onMapClickListener) {\n            this.onMapClickListener.remove();\n        }\n        if (callback) {\n            this.onMapClickListener = await CapacitorGoogleMaps.addListener('onMapClick', this.generateCallback(callback));\n        }\n        else {\n            this.onMapClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onPolygonClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnPolygonClickListener(callback) {\n        if (this.onPolygonClickListener) {\n            this.onPolygonClickListener.remove();\n        }\n        if (callback) {\n            this.onPolygonClickListener = await CapacitorGoogleMaps.addListener('onPolygonClick', this.generateCallback(callback));\n        }\n        else {\n            this.onPolygonClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onCircleClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnCircleClickListener(callback) {\n        if (this.onCircleClickListener)\n            [this.onCircleClickListener.remove()];\n        if (callback) {\n            this.onCircleClickListener = await CapacitorGoogleMaps.addListener('onCircleClick', this.generateCallback(callback));\n        }\n        else {\n            this.onCircleClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMarkerClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMarkerClickListener(callback) {\n        if (this.onMarkerClickListener) {\n            this.onMarkerClickListener.remove();\n        }\n        if (callback) {\n            this.onMarkerClickListener = await CapacitorGoogleMaps.addListener('onMarkerClick', this.generateCallback(callback));\n        }\n        else {\n            this.onMarkerClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onPolylineClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnPolylineClickListener(callback) {\n        if (this.onPolylineClickListener) {\n            this.onPolylineClickListener.remove();\n        }\n        if (callback) {\n            this.onPolylineClickListener = await CapacitorGoogleMaps.addListener('onPolylineClick', this.generateCallback(callback));\n        }\n        else {\n            this.onPolylineClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMarkerDragStart' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMarkerDragStartListener(callback) {\n        if (this.onMarkerDragStartListener) {\n            this.onMarkerDragStartListener.remove();\n        }\n        if (callback) {\n            this.onMarkerDragStartListener = await CapacitorGoogleMaps.addListener('onMarkerDragStart', this.generateCallback(callback));\n        }\n        else {\n            this.onMarkerDragStartListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMarkerDrag' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMarkerDragListener(callback) {\n        if (this.onMarkerDragListener) {\n            this.onMarkerDragListener.remove();\n        }\n        if (callback) {\n            this.onMarkerDragListener = await CapacitorGoogleMaps.addListener('onMarkerDrag', this.generateCallback(callback));\n        }\n        else {\n            this.onMarkerDragListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMarkerDragEnd' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMarkerDragEndListener(callback) {\n        if (this.onMarkerDragEndListener) {\n            this.onMarkerDragEndListener.remove();\n        }\n        if (callback) {\n            this.onMarkerDragEndListener = await CapacitorGoogleMaps.addListener('onMarkerDragEnd', this.generateCallback(callback));\n        }\n        else {\n            this.onMarkerDragEndListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMyLocationButtonClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMyLocationButtonClickListener(callback) {\n        if (this.onMyLocationButtonClickListener) {\n            this.onMyLocationButtonClickListener.remove();\n        }\n        if (callback) {\n            this.onMyLocationButtonClickListener =\n                await CapacitorGoogleMaps.addListener('onMyLocationButtonClick', this.generateCallback(callback));\n        }\n        else {\n            this.onMyLocationButtonClickListener = undefined;\n        }\n    }\n    /**\n     * Set the event listener on the map for 'onMyLocationClick' events.\n     *\n     * @param callback\n     * @returns\n     */\n    async setOnMyLocationClickListener(callback) {\n        if (this.onMyLocationClickListener) {\n            this.onMyLocationClickListener.remove();\n        }\n        if (callback) {\n            this.onMyLocationClickListener = await CapacitorGoogleMaps.addListener('onMyLocationClick', this.generateCallback(callback));\n        }\n        else {\n            this.onMyLocationClickListener = undefined;\n        }\n    }\n    /**\n     * Remove all event listeners on the map.\n     *\n     * @param callback\n     * @returns\n     */\n    async removeAllMapListeners() {\n        if (this.onBoundsChangedListener) {\n            this.onBoundsChangedListener.remove();\n            this.onBoundsChangedListener = undefined;\n        }\n        if (this.onCameraIdleListener) {\n            this.onCameraIdleListener.remove();\n            this.onCameraIdleListener = undefined;\n        }\n        if (this.onCameraMoveStartedListener) {\n            this.onCameraMoveStartedListener.remove();\n            this.onCameraMoveStartedListener = undefined;\n        }\n        if (this.onClusterClickListener) {\n            this.onClusterClickListener.remove();\n            this.onClusterClickListener = undefined;\n        }\n        if (this.onClusterInfoWindowClickListener) {\n            this.onClusterInfoWindowClickListener.remove();\n            this.onClusterInfoWindowClickListener = undefined;\n        }\n        if (this.onInfoWindowClickListener) {\n            this.onInfoWindowClickListener.remove();\n            this.onInfoWindowClickListener = undefined;\n        }\n        if (this.onMapClickListener) {\n            this.onMapClickListener.remove();\n            this.onMapClickListener = undefined;\n        }\n        if (this.onPolylineClickListener) {\n            this.onPolylineClickListener.remove();\n            this.onPolylineClickListener = undefined;\n        }\n        if (this.onMarkerClickListener) {\n            this.onMarkerClickListener.remove();\n            this.onMarkerClickListener = undefined;\n        }\n        if (this.onPolygonClickListener) {\n            this.onPolygonClickListener.remove();\n            this.onPolygonClickListener = undefined;\n        }\n        if (this.onCircleClickListener) {\n            this.onCircleClickListener.remove();\n            this.onCircleClickListener = undefined;\n        }\n        if (this.onMarkerDragStartListener) {\n            this.onMarkerDragStartListener.remove();\n            this.onMarkerDragStartListener = undefined;\n        }\n        if (this.onMarkerDragListener) {\n            this.onMarkerDragListener.remove();\n            this.onMarkerDragListener = undefined;\n        }\n        if (this.onMarkerDragEndListener) {\n            this.onMarkerDragEndListener.remove();\n            this.onMarkerDragEndListener = undefined;\n        }\n        if (this.onMyLocationButtonClickListener) {\n            this.onMyLocationButtonClickListener.remove();\n            this.onMyLocationButtonClickListener = undefined;\n        }\n        if (this.onMyLocationClickListener) {\n            this.onMyLocationClickListener.remove();\n            this.onMyLocationClickListener = undefined;\n        }\n    }\n    generateCallback(callback) {\n        const mapId = this.id;\n        return (data) => {\n            if (data.mapId == mapId) {\n                callback(data);\n            }\n        };\n    }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      {{'MAP_SEARCH' | translate}}\n    </ion-title>\n  </ion-toolbar>\n  <ion-searchbar class=\"ion-no-padding\" color=\"primary\" placeholder=\"Tertiary\" [debounce]=\"250\" (ionInput)=\"updateSearchResults($event)\" placeholder=\"search\">\n  </ion-searchbar>\n</ion-header>\n\n<ion-content>\n  <ion-list class=\"ion-no-padding\" [hidden]=\"autocompleteItems.length == 0\">\n    <ion-item *ngFor=\"let item of autocompleteItems\" tappable (click)=\"selectSearchResult(item)\">\n      {{ item.description }}\n    </ion-item>\n  </ion-list>\n\n  <capacitor-google-map id='map'></capacitor-google-map>\n\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MapSearchPage } from './map-search.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MapSearchPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MapSearchPageRoutingModule {}\n","import { Component, NgZone, OnDestroy } from '@angular/core';\nimport { StorageService } from '../../services/storage.service';\nimport { ModalController } from '@ionic/angular';\nimport { MeetingListService } from '../../services/meeting-list.service';\nimport { LoadingService } from '../../services/loading.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GoogleMap, Marker } from '@capacitor/google-maps';\nimport { ModalPage } from '../modal/modal.page';\nimport { Geolocation } from '@capacitor/geolocation';\nimport { GeocodeService } from '../../services/geocode.service'\nimport { CameraConfig, CameraIdleCallbackData, LatLng, Point, Size } from '@capacitor/google-maps/dist/typings/definitions';\n\ndeclare const google: any;\n@Component({\n  selector: 'app-map-search',\n  templateUrl: './map-search.page.html',\n  styleUrls: ['./map-search.page.scss'],\n})\nexport class MapSearchPage implements OnDestroy {\n\n  performSearch: boolean = true;\n\n  map!: GoogleMap ;\n  addressLatitude: any;\n  addressLongitude: any;\n  loader!: Promise<void> | Promise<boolean> | null;\n  isLoaded = false;\n\n  GoogleAutocomplete!: { getPlacePredictions: (arg0: { input: any; }, arg1: (predictions: any, status: any) => void) => void; };\n  autocompleteItems: any[] = [];\n  autocomplete: { input: any; } = {input: ''};\n  language: string = 'en';\n\n  mapRadius!: Number;\n  currentMeetings!: [];\n  currentMarkerList!: Marker[];\n  currentMarkerIDs: string[] = [];\n\n  ids!: string;\n  meeting!: any;\n  data!: any;\n\n  debounceTimestamp: number = 0;\n\n  constructor(\n    private translate: TranslateService, \n    private storage: StorageService, \n    private loaderCtrl: LoadingService, \n    private GeocodeService: GeocodeService,\n    private meetingListService: MeetingListService,\n    private modalCtrl: ModalController,\n    private zone: NgZone) {\n\n    }\n      \n  ngOnDestroy() {\n    this.map.removeAllMapListeners();\n    this.map.destroy();\n    this.currentMarkerIDs = [];\n    this.currentMarkerList = [];\n    this.currentMeetings = [];\n    // this.map = null;\n  }\n\n  async ionViewDidEnter() {\n    this.GoogleAutocomplete = new google.maps.places.AutocompleteService();\n\n    this.storage.get('language').then(langValue => {\n      if (langValue) {\n        this.language = langValue;\n        this.storage.get('savedAddressLat').then(value => {\n          if (value) {\n            this.addressLatitude = value;\n            this.storage.get('savedAddressLng').then(value => {\n              if (value) {\n                this.addressLongitude = value;\n                setTimeout(async () => {\n                  await this.createMap();\n                }, 500);\n              } else {\n                console.log('No saved location values found');\n              }\n            });\n          } else {\n            this.locatePhone();\n            setTimeout(async () => {\n              await this.createMap();\n            }, 500);\n          }\n        });\n      } else {\n        this.language = 'en';\n        setTimeout(async () => {\n          await this.createMap();\n        }, 500);\n      }\n    });\n  }\n\n\n  async locatePhone() {\n    this.translate.get('LOCATING').subscribe(value => { this.presentLoader(value); });\n    Geolocation.getCurrentPosition().then((resp) => {\n      this.addressLatitude = resp.coords.latitude;\n      this.addressLongitude = resp.coords.longitude;\n\n      this.storage.set('savedAddressLat', this.addressLatitude);\n      this.storage.set('savedAddressLng', this.addressLongitude);\n      this.dismissLoader();\n\n    }).catch((error) => {\n      console.log('Error getting location', error);\n      this.dismissLoader();\n    });\n  }\n\n\n  async createMap(): Promise<void> {\n    const mapRef: HTMLElement = document.getElementById('map')!;\n\n    let mapLatitude: any = 34.2359855;\n    let mapLongitude: any = -118.5656689;\n    if (this.addressLatitude) { mapLatitude = this.addressLatitude }\n    if (this.addressLongitude) { mapLongitude = this.addressLongitude}\n    let currentLatLng: LatLng = { lat: mapLatitude, lng: mapLongitude }\n\n    const mapArgs = {\n      id: 'google-map',\n      element: mapRef,\n      apiKey: 'AIzaSyAtwUjsIB14f0aHgdLk_JYnUrI0jvczMXw',\n      forceCreate: true,\n      language: this.language,\n      config: {\n        center: currentLatLng,\n        zoom: 8\n      }\n    }\n\n    await GoogleMap.create(mapArgs).then(map => {\n      this.map = map;\n\n      this.map.setOnCameraIdleListener((event) => {\n        if (this.performSearch === false) {\n          this.performSearch = true;\n          return;\n        }\n        if (event.zoom <=7) {\n          let cameraConfig: CameraConfig = {zoom: 8}\n          this.map.setCamera(cameraConfig);\n          this.performSearch = false;\n          return;\n        }\n\n        this.translate.get('FINDING_MTGS').subscribe(value => {\n          this.presentLoader(value);\n        });\n\n        let mapRadiusMeters = google.maps.geometry.spherical.computeDistanceBetween(event.bounds.center,event.bounds.southwest);\n        this.mapRadius = Math.ceil(Number(mapRadiusMeters)/1000);\n\n        if (this.currentMarkerIDs.length > 0) {\n          this.map.removeMarkers(this.currentMarkerIDs).then(result => {\n            this.currentMarkerIDs = []\n            this.map.disableClustering().then(clusteringDisabled => {\n              this.getMeetings(event);\n            });\n          });\n        } else {\n          this.getMeetings(event);\n        }\n      });  // setOnCameraIdleListener\n\n      this.map.setOnMarkerClickListener((event) => {\n        this.performSearch = false\n        this.openMeetingModal(event.title)\n      }); // setOnMarkerClickListener\n\n      this.map.setOnBoundsChangedListener(event => {\n      }); // setOnBoundsChangedListener\n\n    }); // create map\n  }\n\n\n  getMeetings(event: CameraIdleCallbackData) {\n    const timeCheck = Date.now() - this.debounceTimestamp\n\n    if (( timeCheck < 1000 ) && (this.debounceTimestamp != 0)) {\n      this.dismissLoader()\n      this.debounceTimestamp = Date.now()\n      return\n    }\n    this.debounceTimestamp = Date.now()\n\n    this.currentMarkerList = []\n    this.meetingListService.getRadiusMeetings(event.bounds.center.lat, event.bounds.center.lng, this.mapRadius).then(meetingList => {\n\n      // Empty result set edge case\n      if (meetingList.data =='{}') {\n        meetingList.data = []\n      }\n\n      meetingList.data = meetingList.data.filter((meeting: { latitude: any }) => meeting.latitude = parseFloat(meeting.latitude));\n      meetingList.data = meetingList.data.filter((meeting: { longitude: any }) => meeting.longitude = parseFloat(meeting.longitude));\n      this.currentMeetings = meetingList.data\n\n      for (let i = 0; i < this.currentMeetings.length; i++) {\n        let meeting: any = this.currentMeetings[i];\n        if (i === this.currentMeetings.length - 1) {\n          this.pushStandaloneMeetingMarker(meeting);\n          this.dismissLoader()\n        } else {\n\n          let currentMeetingLatLng: LatLng = {\n            lat: meeting['latitude'], \n            lng: meeting['longitude']\n          }\n          let nextMeetingLatlng: LatLng = {\n            lat:this.currentMeetings[i + 1]['latitude'],\n            lng:this.currentMeetings[i + 1]['longitude'],\n          }\n\n          if (!this.meetingsAreCoLocated(currentMeetingLatLng, nextMeetingLatlng)) {\n            this.pushStandaloneMeetingMarker(meeting)\n          } else {\n            // We have the start of some co-located meetings on the list\n            this.ids = this.currentMeetings[i]['id_bigint'];\n            do {\n              this.ids += '&meeting_ids[]=' + this.currentMeetings[i + 1]['id_bigint'];\n              let markerLatLng: LatLng = {lat: Number(meeting['latitude']), lng: Number(meeting['longitude'])}\n              this.data = {\n                coordinate: markerLatLng,\n                title: this.ids,\n                iconUrl: 'assets/markercluster/MarkerRed.png',\n                iconAnchor: { x: 29, y: 100 }\n              };\n              \n              i++;\n\n              if (i === (this.currentMeetings.length - 1)) {\n                break\n              }\n              let currentMeetingLatLng: LatLng = {lat:this.currentMeetings[i]['latitude'],lng:this.currentMeetings[i]['longitude']}\n              let nextNextMeetingLatlng: LatLng = {lat:this.currentMeetings[i + 1]['latitude'],lng:this.currentMeetings[i + 1]['longitude']}\n\n            } while (this.meetingsAreCoLocated(\n              {lat:this.currentMeetings[i]['latitude'],lng:this.currentMeetings[i]['longitude']}, \n              {lat:this.currentMeetings[i+1]['latitude'],lng:this.currentMeetings[i+1]['longitude']}\n              ));\n \n            this.currentMarkerList.push(this.data);\n          }\n        }\n      }\n      this.addMarkers();\n    });\n  }\n\n\n  addMarkers() {\n    if (this.currentMarkerList.length > 0) {\n      this.map.addMarkers(this.currentMarkerList).then(markerIDs => {\n        this.currentMarkerIDs = markerIDs;\n        this.map.enableClustering().then(clusteringEnabled => {\n          this.dismissLoader()\n        });\n      });\n    } else {\n      this.dismissLoader()\n    }\n  }\n\n\n  meetingsAreCoLocated(i: LatLng, j: LatLng) {\n    let areColocated = false;\n    if (((Math.round(i.lat * 1000) / 1000) !== (Math.round(j.lat * 1000) / 1000)) ||\n      ((Math.round(i.lng * 1000) / 1000) !== (Math.round(j.lng * 1000) / 1000))) {\n      areColocated = false;\n    } else {\n      areColocated = true;\n    }\n    return areColocated;\n  }\n\n\n  pushStandaloneMeetingMarker(meeting: any) {\n    let markerLatLng: LatLng = {lat: Number(meeting['latitude']), lng: Number(meeting['longitude'])}\n    this.data = {\n      coordinate: markerLatLng,\n      title: meeting['id_bigint'],\n      iconUrl: 'assets/markercluster/MarkerBlue.png',\n      iconAnchor: {\n        x: 29,\n        y: 100,\n      }\n    };\n    this.currentMarkerList.push(this.data);\n  }\n\n\n  selectSearchResult(item: { description: string }) {\n    this.autocompleteItems = [];\n    this.autocomplete.input = item.description;\n\n    this.GeocodeService.convertAddress(item.description).subscribe((geocode_reponse: any) => {\n      if (geocode_reponse.results[0]) {\n        this.addressLatitude = geocode_reponse.results[0].geometry.location.lat;\n        this.addressLongitude = geocode_reponse.results[0].geometry.location.lng;\n        this.dismissLoader();\n        this.map.setCamera({\n          coordinate: {\n            lat: this.addressLatitude ,\n            lng: this.addressLongitude,\n          },\n          zoom: 10\n        });\n      } else {\n        this.dismissLoader();\n      }\n    });\n  }\n\n\n  updateSearchResults(event: any) {\n    this.autocomplete.input = event.detail.value;\n    if (this.autocomplete.input === '') {\n      this.autocompleteItems = [];\n      return;\n    }\n\n    let config = {\n      types: ['geocode'],\n      input: event.detail.value,\n      language: this.language\n    }\n\n    this.GoogleAutocomplete.getPlacePredictions(config, (predictions, status) => {\n      this.autocompleteItems = [];\n      this.zone.run(() => {\n        predictions.forEach((prediction: any) => {\n          this.autocompleteItems.push(prediction);\n        });\n      });\n    });\n  }\n\n\n  presentLoader(loaderText: any) {\n    if (!this.loader) {\n      this.loader = this.loaderCtrl.present(loaderText);\n    }\n  }\n\n\n  dismissLoader() {\n    if (this.loader) {\n      this.loader = this.loaderCtrl.dismiss();\n      this.loader = null;\n      }\n    }\n\n\n  openMeetingModal(meetingIDs: any) {\n    this.meetingListService.getMeetingsByIDs(meetingIDs).then((response) => {\n      this.meeting = response.data;\n      this.meeting.filter((i: any) => i.start_time_raw = this.convertTo12Hr(i.start_time));\n      this.openModal(this.meeting);\n    });\n  }\n\n\n  async openModal(meeting: any) {\n    const modal = await this.modalCtrl.create({\n      component: ModalPage,\n      componentProps: {\n        data: this.meeting\n      }\n    });\n\n    modal.onDidDismiss().then((dataReturned) => {\n    });\n\n    return await modal.present();\n  }\n\n  public convertTo12Hr(timeString: any) {\n    const H = +timeString.substr(0, 2);\n    const h = H % 12 || 12;\n    const ampm = (H < 12 || H === 24) ? ' am' : ' pm';\n    timeString = h + timeString.substr(2, 3) + ampm;\n    return timeString;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { MapSearchPageRoutingModule } from './map-search-routing.module';\nimport { MapSearchPage } from './map-search.page';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ModalPage } from '../modal/modal.page';\nimport { Routes } from '@angular/router';\nimport { MeetingListService } from 'src/app/services/meeting-list.service';\nimport { StorageService } from 'src/app/services/storage.service';\nimport { GeocodeService } from 'src/app/services/geocode.service';\n\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TranslateModule,\n    MapSearchPageRoutingModule\n  ],\n  declarations: [\n    MapSearchPage\n  ],\n  providers: [\n    MeetingListService,\n    StorageService,\n    GeocodeService\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class MapSearchPageModule {}\n","import { CapacitorGoogleMaps } from './implementation';\nexport class LatLngBounds {\n    constructor(bounds) {\n        this.southwest = bounds.southwest;\n        this.center = bounds.center;\n        this.northeast = bounds.northeast;\n    }\n    async contains(point) {\n        const result = await CapacitorGoogleMaps.mapBoundsContains({\n            bounds: this,\n            point,\n        });\n        return result['contains'];\n    }\n    async extend(point) {\n        const result = await CapacitorGoogleMaps.mapBoundsExtend({\n            bounds: this,\n            point,\n        });\n        this.southwest = result['bounds']['southwest'];\n        this.center = result['bounds']['center'];\n        this.northeast = result['bounds']['northeast'];\n        return this;\n    }\n}\nexport var MapType;\n(function (MapType) {\n    /**\n     * Basic map.\n     */\n    MapType[\"Normal\"] = \"Normal\";\n    /**\n     * Satellite imagery with roads and labels.\n     */\n    MapType[\"Hybrid\"] = \"Hybrid\";\n    /**\n     * Satellite imagery with no labels.\n     */\n    MapType[\"Satellite\"] = \"Satellite\";\n    /**\n     * Topographic data.\n     */\n    MapType[\"Terrain\"] = \"Terrain\";\n    /**\n     * No base map tiles.\n     */\n    MapType[\"None\"] = \"None\";\n})(MapType || (MapType = {}));\n","import { registerPlugin } from '@capacitor/core';\nconst CapacitorGoogleMaps = registerPlugin('CapacitorGoogleMaps', {\n    web: () => import('./web').then(m => new m.CapacitorGoogleMapsWeb()),\n});\nCapacitorGoogleMaps.addListener('isMapInFocus', data => {\n    var _a;\n    const x = data.x;\n    const y = data.y;\n    const elem = document.elementFromPoint(x, y);\n    const internalId = (_a = elem === null || elem === void 0 ? void 0 : elem.dataset) === null || _a === void 0 ? void 0 : _a.internalId;\n    const mapInFocus = internalId === data.mapId;\n    CapacitorGoogleMaps.dispatchMapEvent({ id: data.mapId, focus: mapInFocus });\n});\nexport { CapacitorGoogleMaps };\n"],"x_google_ignoreList":[0,5,6]}